#!/bin/bash
# Author: Luka Ruzic

# add stdout and stderr (print logfiles to session)
# allow logs to be placed with output

usage() {
    {
	echo "Usage:   $0 [options] [qsub_options] \"<job(s)>\""
	echo "Description: submits job(s) (either commands or scripts) to the cluster"
	echo "             is essentially a wrapper for:"
	echo "             qsub -N qup -terse -V -b y -o ~/SGElogs -e ~/SGElogs \"<job(s)>\""
	echo "             after any and all options for qup, you can add any of the following qsub options before <job(s)>:"
	echo "                 -N, -hold_jid, -sync, -m, -wd, -M, -m"
	echo "Options:"
	echo "   --fg"
	echo "       foreground the <job(s)> (same as qsub's -sync y)"
	echo "   --a [<n>] <commands.lst>"
	echo "       run every line in <commands.lst> file as jobs in an array job (qsub's -t)" 
	echo "       running <n> in parallel (DEFAULT n: 30) (qsub's -tc)"
	echo "   --l [<dir>]"
	echo "       place logfiles in <dir> (qsub's -o <dir> -e <dir>) (DEFAULT: ~/SGElogs)"
	echo "   --p"
	echo "       print log files to stdout and stderr (also sets --fg)"
	echo "   --L"
	echo "       place logfiles in the working directory (overridden by --l)"
	echo "   --v"
	echo "       verbose mode"
	echo "   --help | -help"
	echo "       get this usage info"
	echo
	echo "NOTE: you can include multiple commands separated by semicolons, as on the command line:"
	echo "       ex: qup \"fslmerge -t run1 run1_vol*; fslmerge -t run2 run2_vol*\""
	echo "      works for regular qup AND array jobs (--a)"
    } >&2

    exit 7
}


### SET UP
# set defaults
#ARG_STANDARD="-terse -b y -V -S /bin/bash"
arg_standard="-terse -b y -V"
commands_at_a_time=30
arg_jobname="-N qup"
# error checking
if [ ! "$1" ]; then echo "ERROR: insufficient arguments" >&2; usage; fi
# parse arguments
while [ "$1" ]; do
    if [[ "$1" =~ -{0,2}help ]]; then       
	usage
    elif [ "$1" == "--d" ]||[ "$1" == "-wd" ]; then
	wdir=$2
	arg_wdir="-wd $wdir"
	shift 2
    elif [ "$1" == "--fg" ]; then
	fg=set
	shift
    elif [ "$1" == "--a" ]; then
	arrayjob=set
	if [[ "$2" =~ .lst$ ]]; then
	    commandlist=$2
	    shift 1
	elif [[ "$3" =~ .lst$ ]]; then
	    commandlist=$3
	    commands_at_a_time=$2
	    shift 2
	else
	    echo "MALFORMED --a option (usage: --a [<n>] <commands.lst>)" >&2
	    exit 7
	fi
	arg_jobname="-N $(basename ${commandlist%.lst})"
	shift
    elif [ "$1" == "--p" ]; then
	fg=set
	printlogs=set
	shift
    elif [ "$1" == "--l" ]; then
	if [ ! $2 ]||[ ${2:0:1} == "-" ]; then
	    echo "INSUFFICIENT ARGUMENTS TO --l" >&2
	    usage
	elif [ ! -d "$2" ]; then 
	    echo "NO SUCH DIRECTORY: $2; using ~/SGElogs" >&2
	    usage
	else
	    logdir=$2
	    shift 2
	fi
    elif [ "$1" == "--L" ]; then
	put_logs_in_wd=set
	shift
    elif [ "$1" == "--v" ]; then
	verbose=set
	shift
    elif [ "$1" == "-hold_jid" ]; then
	hold_jids+=",$2"
	shift 2
    elif [ "$1" == "-N" ]; then
	arg_jobname="-N $2"
	shift 2
    elif [ "$1" == "-sync" ]; then
	arg_sync="-sync $2"
	shift 2
    elif [ "$1" == "-m" ]; then
	arg_mailcond="-m $2"
	shift 2
    elif [ "$1" == "-M" ]; then
	arg_mail="-M $2"
	shift 2
    elif [ "$1" == "-l" ]; then
	arg_L=$arg_L" -l $2"
	shift 2
    else ### assume the rest is commands
	job="$*"
	break
    fi
done

[ $printlogs ] && unset arg_sync

[ $hold_jids ] && arg_hold="-hold_jid $hold_jids"

[ $fg ] && fg="-sync y"

if [ ! "$arg_mail" ]&&[ -f ~/.addy ]; then
    arg_mail="-M $(head -1 ~/.addy)"
fi
if [ ! "$arg_mailcond" ]; then
    arg_mailcond="-m n"
fi

# set log directory
if [ ! $logdir ]; then
    if [ $put_logs_in_wd ]; then
	logdir=${wdir:-$PWD}
    elif [ -d ~/SGElogs ]; then
	logdir=~/SGElogs
    else
	logdir=`mktemp -d -p ~/tmp` || mktempfail
	echo "echo WARNING: ~/SGElogs does not exist; using $LOGDIR instead" >&2
    fi
fi
[ $logdir ] && arg_logs="-o $logdir -e $logdir"
    
# submit job
if [ $arrayjob ]; then
    cmd="qsub $arg_standard $arg_L $arg_mail $arg_mailcond $arg_hold $arg_jobname $fg $arg_logs ${arg_wdir:--cwd} -tc $commands_at_a_time $* -t 1-$(wc -l < $commandlist) qup_array $commandlist"
    [ $verbose ] && echo $cmd
    [ $printlogs ] && jnum=($(eval $cmd)) || eval $cmd
else
    cmd="qsub $arg_standard $arg_L $arg_mail $arg_mailcond $arg_hold $arg_jobname $fg $arg_logs ${arg_wdir:--cwd} \"$job\""
    [ $verbose ] && echo $cmd
    [ $printlogs ] && jnum=($(eval $cmd)) || eval $cmd
fi

if [ $printlogs ]; then
    echo ${jnum[*]:1}
    awk 'FNR==1 {printf "\n----- %s -----\n",FILENAME} {print $0}' ~/SGElogs/*${jnum[0]}*
    echo
    #f=$LOGDIR/qup.o${jnum[0]}   
    #echo "-----STDOUT (${f:-N/A})-----"    
    #[ -f $f ] && cat $f
    #echo
    #f=$(ls $LOGDIR/qup.e${jnum[0]} 2>/dev/null)
    #echo "-----STDERR (${f:-N/A})-----"
    #[ -f $f ] && cat $f
    #echo
fi

exit 0
